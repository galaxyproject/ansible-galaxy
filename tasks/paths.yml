---

- name: Manage Paths
  block:

    - name: Get group IDs for Galaxy users
      getent:
        database: passwd
        key: "{{ item }}"
      with_items:
        - "{{ __galaxy_user_name }}"
        - "{{ __galaxy_privsep_user_name }}"
      when: galaxy_group is not defined
      register: __galaxy_passwd_result

    - name: Get group names for Galaxy users
      getent:
        database: group
        key: "{{ item.ansible_facts.getent_passwd[item.invocation.module_args.key][2] }}"
      with_items: "{{ __galaxy_passwd_result.results }}"
      loop_control:
        label: "{{ item.item }}"
      when: galaxy_group is not defined
      register: __galaxy_group_result

    - name: Set Galaxy user facts
      set_fact:
        __galaxy_user_group: "{{ ((galaxy_group | default({})).name | default(galaxy_group)) if galaxy_group is defined else (__galaxy_group_result.results[0].ansible_facts.getent_group.keys() | first) }}"
        __galaxy_privsep_user_group: "{{ ((galaxy_group | default({})).name | default(galaxy_group)) if galaxy_group is defined else (__galaxy_group_result.results[1].ansible_facts.getent_group.keys() | first) }}"

    # try to become root. if you need something fancier, don't use the role and write your own
    - name: Create galaxy_root
      file:
        path: "{{ galaxy_root }}"
        state: directory
        owner: "{{ __galaxy_privsep_user_name }}"
        group: "{{ __galaxy_privsep_user_group }}"
        mode: "{{ __galaxy_dir_perms }}"
      when: galaxy_root is defined

    - name: Create additional privilege separated directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ __galaxy_privsep_user_name }}"
        group: "{{ __galaxy_privsep_user_group }}"
        mode: "{{ __galaxy_dir_perms }}"
      with_items: "{{ galaxy_privsep_dirs }}"

    - name: Create additional directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ __galaxy_user_name }}"
        group: "{{ __galaxy_user_group }}"
        mode: "{{ __galaxy_dir_perms }}"
      with_items: "{{ galaxy_dirs }}"

  # TODO: for root squashing it might be useful for this to be separate from other root tasks
  remote_user: "{{ galaxy_remote_users.root | default(omit) }}"
  become: "{{ true if galaxy_become_users.root is defined else __galaxy_become }}"
  become_user: "{{ galaxy_become_users.root | default(ansible_user_id) }}"
